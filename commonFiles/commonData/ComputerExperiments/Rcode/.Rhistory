dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel
xdata[1]
xdata[2]
xdata[3]
xdata[3,1]
xdata[3,2]
xdata[2,2]
xdata[,2]
ydata <-as.matrix(read.table("../data/maxdep.dat", header=TRUE))
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
# read input data
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/maxdep.dat", header=TRUE))
## 1D Example - 1
#n = 5; d = 1;
#set.seed(3);
#library(lhs, lib.loc="~/R-packages");
#x = maximinLHS(n,d);
#beta = rnorm(1);
#R = corr_matrix(x,beta);
#print(R)
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
#computer_simulator <- function(x) {
#y <- log(x+0.1)+sin(5*pi*x);
#return(y)
#}
#set.seed(1);
#library(lhs);
#x = maximinLHS(n,d);
#y = computer_simulator(x);
## GPfit
#library(GPfit, lib.loc="~/R-packages");
#GPmodel = GP_fit(xdata,ydata);
#GP_th = 10^(GPmodel$beta)
#GP_p = GPmodel$correlation_param$power
#control=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
#upper_cons<- c(2, 2, 2, 2, 2, 2,3, 3, 3, 3, 3, 3, 3);
#lower_cons<- c(-2, -2, -2, -2, -2, -2,1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10, 1e-10);
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
## mlegp
#library(mlegp, lib.loc="~/R-packages/")
#MLEmodel = mlegp(xdata, ydata, BFGS.tol=0.0001, simplex.maxiter=1000, simplex.ntries=50, BFGS.maxiter=1000, verbose=1)
#MLE_p = MLEmodel$a
#MLE_th = MLEmodel$beta
#MLE_RMSE <- sqrt(mean((MLEmodel$cv[,1] - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
xdata[,1]
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
ydata
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel_coeffs <- coef(KMmodel)
KMmodel_coeffs <- coef(KMmodel)
KMmodel_coeffs <- coef(KMmodel)
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
## mlegp
#library(mlegp, lib.loc="~/R-packages/")
#MLEmodel = mlegp(xdata, ydata, BFGS.tol=0.0001, simplex.maxiter=1000, simplex.ntries=50, BFGS.maxiter=1000, verbose=1)
#MLE_p = MLEmodel$a
#MLE_th = MLEmodel$beta
#MLE_RMSE <- sqrt(mean((MLEmodel$cv[,1] - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp'
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
## mlegp
#library(mlegp, lib.loc="~/R-packages/")
#MLEmodel = mlegp(xdata, ydata, BFGS.tol=0.0001, simplex.maxiter=1000, simplex.ntries=50, BFGS.maxiter=1000, verbose=1)
#MLE_p = MLEmodel$a
#MLE_th = MLEmodel$beta
#MLE_RMSE <- sqrt(mean((MLEmodel$cv[,1] - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
ydata <-as.matrix(read.table("../data/totaldep.dat", header=TRUE))
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/totaldep.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel_coeffs <- coef(KMmodel)
KMmodel_coeffs <- coef(KMmodel)
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/maxdep.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
control=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', control)
xdata[,1]
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', control)
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp')
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~xdata[,1]^2, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/totaldep.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='gauss', upper=c(utol,utol, utol, utol,utol,utol,utol))
KMmodel <- km(formula=~xdata[,1], design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 10), m = KMmodel)
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 10), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 20), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 5), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 8), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qnorm", q.arg = list(min = 0, max = 8), m = KMmodel)
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qnorm", m = KMmodel)
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qnorm", q.arg = list(min = 0, max = 1), m = KMmodel)
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 8), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel
SA.metamodel.X1
plot(SA.metamodel, names.arg=c("gamma"))
SA
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/maxdep.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 8), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 5), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design_scaled.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/maxdep_scaled.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 2), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = .2), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
ydata <-as.matrix(read.table("../data/totaldep_scaled.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design_scaled.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/totaldep_scaled.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel
rm(list=ls())
# read input data
xdata <-as.matrix(read.table("../data/design_scaled.dat", header=TRUE))
# read output data
ydata <-as.matrix(read.table("../data/maxdep_scaled.dat", header=TRUE))
## 1D Example 2
xsize <- dim(xdata);
ysize <- dim(ydata);
n = xsize[1]; d = xsize[2];
clist=list(pgtol=1e-14, lmm=100, factr=1e2, maxit=2000, optim.method='BFGS')
utol <-11
##Kriging fit
library(DiceKriging, lib.loc="~/R-packages/")
KMmodel <- km(formula=~1, design=xdata, response=ydata, covtype='powexp', control=clist)
KMmodel_coeffs <- coef(KMmodel)
KM_p <- c(do.call("cbind",KMmodel_coeffs[3]))
KM_th <- c(do.call("cbind",KMmodel_coeffs[2]))
KM_th <- 0.5*(1/KM_th)^2
KM_RMSE <-sqrt(mean((leaveOneOut.km(KMmodel, 'UK')$mean - ydata)^2))
CVprediction <- leaveOneOut.km(KMmodel,'UK')$mean
CVresidual <- (CVprediction - ydata)
plot(CVprediction,CVresidual/max(abs(CVresidual)), ylim=c(-1,1), xlab='CV prediction', ylab='Standardized CV residual')
setEPS()
postscript("DiceKrigingDiag.eps")
plot(KMmodel)
dev.off()
setEPS()
postscript("CVpredVSresid.eps")
plot(CVprediction,2*CVresidual/max(abs(CVresidual)), ylim=c(-2,2), xlab='CV prediction', ylab='Standardized CV residual')
dev.off()
library(sensitivity, lib.loc="~/R-packages/")
kriging.mean <- function(Xnew, m) { predict.km(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean }
SA.metamodel <- fast99(model = kriging.mean, factors =d , n = 1000, q = "qunif", q.arg = list(min = 0, max = 1), m = KMmodel)
setEPS()
postscript("SAKriging.eps")
plot(SA.metamodel)
dev.off()
SA.metamodel
